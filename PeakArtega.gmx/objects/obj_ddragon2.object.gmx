<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dr1jump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5010</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>quaketype = 0;
touchingpl = 0;
touchingar = 0;
startmoving = 0;
image_speed = 0;
image_index = 0;
setonce = 0;
playerturn = 0;
imagespeed = 0;
white = 0;
setwhite = 0;
takingdamage = 0;
dead = 0;
died = 0;
enemyiam = 2;
imageindex = 0;
ymov = 3;

attacktype = 0;
beginwaittime = 60;
endingturn = 1;
endturn = 1;

defence = 1;

instance_create(0, 0, obj_hitcircleddragon1);
instance_create(0, 0, obj_closemeleecirc2);
if(instance_exists(obj_archer)){instance_create(0, 0, obj_ranged2);}
instance_create(0, 0, obj_ddr1hitboxmaker);
instance_create(0, 0, obj_follow1slamdragon);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead == 1)
{
    if(image_index == 2 &amp;&amp; died == 0)
    {
        imagespeed = 0;
        depth = 10;
        with(obj_ddr1hitboxmaker)
        {
            instance_destroy();
        }
        obj_combat.enemycount -= 1;
        if(enemyiam == 1)
        {
            obj_combat.enemy1 = 0;
            with(obj_closemeleecirc1){instance_destroy();}
            if(instance_exists(obj_archer)){with(obj_ranged1){instance_destroy();}}
            //with(obj_hitcircleddragon1){instance_destroy();}
        }
        else if(enemyiam == 2)
        {
            obj_combat.enemy2 = 0;     
            with(obj_closemeleecirc2){instance_destroy();}
            if(instance_exists(obj_archer)){with(obj_ranged2){instance_destroy();}}
            //with(obj_hitcircleddragon2){instance_destroy();}    
        }
        else if(enemyiam == 3)
        {
            obj_combat.enemy3 = 0;     
            with(obj_closemeleecirc3){instance_destroy();}
            if(instance_exists(obj_archer)){with(obj_ranged3){instance_destroy();}}
            //with(obj_hitcircleddragon3){instance_destroy();}        
        }
        died = 1;
        if(instance_exists(obj_for1slam1bat)){with(obj_for1slam1bat){instance_destroy();}}
    }
    else if(died == 0)
    {
        sprite_index = spr_dr1dying;
        imagespeed = .03;
        scr_imageindex(imagespeed);
    }
}
else
{
    if(obj_combat.timer &gt;= 36 &amp;&amp; obj_combat.timer != 0)
    {
        endturn = 0;
    }
    else if(obj_combat.newturn == 1)
    {
        image_index = 0;
        setonce = 0;
    }
    else
    {
        endingturn = 1;
    }
    
    if(startmoving != 1)
    {
        sprite_index = spr_dr1jump;
        if(imageindex &lt; .1)
        {
            imageindex += .004;
        }
        else if(imageindex &lt; 2)
        {
            imageindex += .15;
        }
        else if(imageindex &gt;= 2 &amp;&amp; imageindex &lt; 2.6)
        {
            imageindex += .034;
            image_xscale += .006;
            image_yscale += .006;
            y += ymov;
            ymov -= .05;
        }
        else if(imageindex &gt;= 2.6 &amp;&amp; imageindex &lt; 3)
        {
            imageindex += .034;
            image_xscale -= .006;
            image_yscale -= .006;
            y += ymov;
            ymov -= .05;
        }
        else if(imageindex &gt;= 3 &amp;&amp; imageindex &lt; 4)
        {
            image_xscale = 1;
            image_yscale = 1;
            imageindex += .06;
        }
        else if(imageindex &gt;= 4)
        {
            startmoving = 1;
            imageindex = 0;
        }
        image_index = imageindex;
    }
    else
    {
        depth = -y;
        image_speed = 0;
        if(attacktype == 0 &amp;&amp; endingturn == 1)
        {
            sprite_index = spr_dr1earthquake;
            imagespeed = .05;
            touchingpl = obj_hitcircleddragon1.touchingplayer;
            dodge = obj_hitcircleddragon1.dodge;
            if(image_index == 4)
            {
                instance_create(0, 0, obj_camerashake);
                if(obj_hitcircleddragon1.touchingplayer == 1)
                {
                    with(obj_combatplayer)
                    {
                        launchback = 18;
                    }
                    with(obj_combat)
                    {
                        plhealth -= 6;
                    }
                }
                if(touchingpl == 0 &amp;&amp; dodge == 1)
                {
                    audio_play_sound(snd_dodge, 0, false);
                }
                if(obj_hitcircleddragon1.touchingarcher == 1)
                {
                    with(obj_archer)
                    {
                        heal += 16;
                    }
                }
            }
            if(image_index == 5)
            {
                quaketype += 1;
                if(quaketype == 2)
                {
                    quaketype = 0;
                }
                if(quaketype == 0)
                {
                    instance_create(obj_combatplayer.x, obj_combatplayer.y, obj_earthquakevert);
                }
                else
                {
                    instance_create(obj_combatplayer.x, obj_combatplayer.y, obj_earthquakehoriz);            
                }
                image_index = 0;
                endingturn = 0;
            }
        }
        else if(endingturn == 0)
        {
            if(setonce == 0)
            {
                setonce = 1;
                sprite_index = spr_dr1tired;
                imagespeed = .03;
            }
            if(white != 0)
            {
                sprite_index = spr_dr1downwhite;
                setwhite = 1;
            }
            else if(setwhite == 1)
            {
                sprite_index = spr_dr1down;
                setwhite = 0;
            }
            if(takingdamage != 0)
            {
                if(enemyiam == 1)
                {
                    obj_combat.enemy1health += takingdamage * defence;
                }
                else if(enemyiam == 2)
                {
                    obj_combat.enemy2health += takingdamage * defence;              
                }
                else if(enemyiam == 3)
                {
                    obj_combat.enemy3health += takingdamage * defence;                  
                }
            }
        }
        scr_imageindex(imagespeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
