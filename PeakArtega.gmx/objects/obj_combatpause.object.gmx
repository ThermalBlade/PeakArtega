<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_combatplayer.died == 1)
{
    instance_destroy();
}

instance_create(obj_combatplayer.x, obj_combatplayer.y, obj_bright);

alpha = 0;
combackalpha = 0;
depth = -10000;
chosenenemy = 0;
choseamt = 0;
choice = "";
space = 50;
mpos = 0;
diadon = 0;
enemiesx[3] = 0;
enemiesy[3] = 0;
enemies[3] = 0;
enemycount = 0;
pickedenemy = 0;
pickedattack = 0;
choosingenemy = 0;
curem = 0;
cangoback = 0;
attacking = 0;
slicecolor = 0;
stabcolor = 0;
skip = 0;

obj_combatplayer.image_speed = 0;

/// Change with save stuff
choiceamt = 2;
choice[0] = "SLICE";
choice[1] = "STAB";
slicestan = 11;
stabstan = 22;

if(obj_combatplayer.sprite_index == spr_player_uproll)
{
    obj_combatplayer.sprite_index = spr_player_upsprint;
}
else if(obj_combatplayer.sprite_index == spr_player_rolldown)
{
    obj_combatplayer.sprite_index = spr_player_downsprint;
}
else if(obj_combatplayer.sprite_index == spr_player_rightroll)
{
    obj_combatplayer.sprite_index = spr_player_rightsprint;
}
else if(obj_combatplayer.sprite_index == spr_player_leftroll)
{
    obj_combatplayer.sprite_index = spr_player_leftsprint;
}
obj_combatplayer.image_index = 0;

//Set Surface
combatPauseSurf = surface_create(room_width, room_height);

if(obj_closemeleecirc1.touchingplayer == 1)
{
    enemiesx[enemycount] = obj_combat.enemy1.x;
    enemiesy[enemycount] = obj_combat.enemy1.y;
    enemies[enemycount] = obj_combat.enemy1;
    enemycount += 1;
}
if(obj_combat.enemycount == 2 &amp;&amp; obj_closemeleecirc2.touchingplayer == 1|| obj_combat.enemycount == 3 &amp;&amp; obj_closemeleecirc2.touchingplayer == 1)
{
    enemiesx[enemycount] = obj_combat.enemy2.x;
    enemiesy[enemycount] = obj_combat.enemy2.y;
    enemies[enemycount] = obj_combat.enemy2;
    enemycount += 1;
}
if(obj_combat.enemycount == 3 &amp;&amp; obj_closemeleecirc3.touchingplayer == 1)
{
    enemiesx[enemycount] = obj_combat.enemy3.x;
    enemiesy[enemycount] = obj_combat.enemy3.y;
    enemies[enemycount] = obj_combat.enemy3;
    enemycount += 1;
}

backimage = 0;
backimagecounter = 0;

/*if(instance_exists(obj_stanis))
{
    with(obj_stanis){instance_destroy();}
}*/

if(room == rm_firsttutcombat &amp;&amp; !instance_exists(obj_tut1check))
{
    intut = 1;
    intut1 = 0
    se = 0;
}
else if(room == rm_firsttutcombat)
{
    intut1 = 1;
    intut = 0;
    se = 0;
}
else
{
    intut = 0;
    intut1 = 0;
    se = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_bright)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(combatPauseSurf) 
{
    combatPauseSurf = surface_create(room_width, room_height);
}
if(obj_combatplayer.died == 1)
{
    instance_destroy();
}

backimagecounter += 1;
if(backimagecounter == 12)
{
    backimagecounter = 0;
    backimage += 1;
    if(backimage == 4)
    {
        backimage = 0;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pickedenemy == 0)
{
    var move = 0;
    move += max(keyboard_check_pressed(vk_right), keyboard_check_pressed(ord("D")), 0);
    move -= max(keyboard_check_pressed(vk_left), keyboard_check_pressed(ord("A")), 0);
    if(move != 0)
    {
        if((choosingenemy + move) == -1)
        {
            choosingenemy = enemycount - 1;
        }  
        else if((choosingenemy + move) == enemycount)
        {
            choosingenemy = 0;
        }
        else
        {
            choosingenemy += move;
        }
    }
    var enter = 0;
    enter = max(keyboard_check_pressed(vk_enter), 0);
    if(enter == 1)
    {
        pickedenemy = 1;
        chosenenemy = choosingenemy;
        combackalpha = 0;
    }
    scr_drawcursor();
}
else if(pickedattack == 0)
{
    enter = max(keyboard_check_pressed(vk_enter), 0);
    shift = max(keyboard_check_pressed(vk_control), 0);
    scr_drawcombatchoices();
    if(shift == 1)
    {
        pickedenemy = 0;
        choseenemy = 0;
        choosingenemy = 0;
    }
    else if(enter == 1)
    {
        scr_combatchoices();
        pickedattack = 1;
        if(global.choice == 1)
        {
            if((obj_combatplayer.stanima + obj_combatplayer.stabstan) &gt; 22)
            {
                //soundeffect
                pickedattack = 0;
            } 
        }
    }
}
else if(pickedattack == 1 &amp;&amp; intut == 0 &amp;&amp; intut1 == 0)
{
    alpha = 1;
    
    enter = max(keyboard_check_pressed(vk_enter), 0);
    shift = max(keyboard_check_pressed(vk_control), 0);
    if(enter == 1)
    {
        cangoback = 1;
    }
    else if(shift == 1 &amp;&amp; cangoback == 0)
    {
        pickedattack = 0;
        alpha = 0;
        combackalpha = 0;
    }
    if(global.choice == 0 &amp;&amp; attacking == 0)
    {
        scr_getcombatinput();
        scr_turn();
        if((obj_combatplayer.stanima + obj_combatplayer.slicestan - 1) &gt; 21)
        {
            obj_combat.timer = 0;
            obj_combat.truetimer = 0;
            obj_combatplayer.turn = 0;
            obj_combat.nomorecircs = 1;
            instance_destroy();
        }
        else if(enter == 1 &amp;&amp; attacking == 0)
        {
            attacking = 1;
            scr_slice();
        }
    }
    else if(global.choice == 1 &amp;&amp; attacking == 0)
    {
        scr_getcombatinput();
        scr_turn();
        if((obj_combatplayer.stanima + obj_combatplayer.stabstan - 1) &gt; 21)
        {
            obj_combat.timer = 0;
            obj_combat.truetimer = 0;
            obj_combatplayer.turn = 0;
            obj_combat.nomorecircs = 1;
            instance_destroy();
        }
        else if(enter == 1 &amp;&amp; attacking == 0)
        {
            attacking = 1;
            scr_stab();
        }
    }
}
else if(pickedattack == 1 &amp;&amp; intut1 == 1)
{
    if(se == 0)
    {
        instance_create(0, 0, obj_killit);
        se = 1;
    }
    if(!instance_exists(obj_killit))
    {
        alpha = 1;
        
        enter = max(keyboard_check_pressed(vk_enter), 0);
        shift = max(keyboard_check_pressed(vk_control), 0);
        if(enter == 1)
        {
            cangoback = 1;
        }
        else if(shift == 1 &amp;&amp; cangoback == 0)
        {
            pickedattack = 0;
            alpha = 0;
            combackalpha = 0;
        }
        if(global.choice == 0 &amp;&amp; attacking == 0)
        {
            scr_getcombatinput();
            scr_turn_new();
            if((obj_combatplayer.stanima + obj_combatplayer.slicestan - 1) &gt; 21)
            {
                obj_combat.timer = 0;
                obj_combat.truetimer = 0;
                obj_combatplayer.turn = 0;
                obj_combat.nomorecircs = 1;
                instance_destroy();
            }
            else if(enter == 1 &amp;&amp; attacking == 0)
            {
                attacking = 1;
                scr_slice();
            }
        }
        else if(global.choice == 1 &amp;&amp; attacking == 0)
        {
            scr_getcombatinput();
            scr_turn();
            if((obj_combatplayer.stanima + obj_combatplayer.stabstan - 1) &gt; 21)
            {
                obj_combat.timer = 0;
                obj_combat.truetimer = 0;
                obj_combatplayer.turn = 0;
                obj_combat.nomorecircs = 1;
                instance_destroy();
            }
            else if(enter == 1 &amp;&amp; attacking == 0)
            {
                attacking = 1;
                scr_stab();
            }
        }
    }
}
else if(pickedattack == 1 &amp;&amp; intut == 1)
{
    if(se == 0)
    {
        instance_create(0, 0, obj_aimandwalkaway);
        se = 1;
    }
    if(!instance_exists(obj_aimandwalkaway))
    {
        alpha = 1;
        enter = 0;//max(keyboard_check_pressed(vk_enter), 0);
        if(global.choice == 0 &amp;&amp; attacking == 0)
        {
            scr_getcombatinput();
            scr_turn_new();
            if((obj_combatplayer.stanima + obj_combatplayer.slicestan - 1) &gt; 21)
            {
                obj_combat.timer = 0;
                obj_combat.truetimer = 0;
                obj_combatplayer.turn = 0;
                obj_combat.nomorecircs = 1;
                instance_destroy();
            }
        }
        else if(global.choice == 1 &amp;&amp; attacking == 0)
        {
            scr_getcombatinput();
            scr_turn_new();
            if((obj_combatplayer.stanima + obj_combatplayer.stabstan - 1) &gt; 21)
            {
                obj_combat.timer = 0;
                obj_combat.truetimer = 0;
                obj_combatplayer.turn = 0;
                obj_combat.nomorecircs = 1;
                instance_destroy();
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Night
surface_set_target(combatPauseSurf);
draw_clear(c_black);

with(obj_bright)
{
    draw_set_blend_mode(bm_src_color);
    draw_sprite_ext(spr_glow, 0, x, y, glowSize, glowSize, 0, c_white, obj_combatpause.alpha);
    draw_set_blend_mode(bm_normal);
}

surface_reset_target();
draw_surface_ext(combatPauseSurf, 0, 0, 1, 1, 0, c_white, .8);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
