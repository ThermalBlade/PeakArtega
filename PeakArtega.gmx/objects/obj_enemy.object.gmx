<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dr1fdown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create The Path
path = path_add();
spd = .75;
sped = .75;

///
mx = (((obj_one.x) div 32) * 32);
my = (((obj_one.y + 4) div 32) * 32); 
///

timer = 0;
agrotimer = 0;
image_speed = .1;

counter = 0;
glowSize = 1;

range = 120;
dir = 0;
seen = false;

target = -1;

dirtimer = 0;
dirtimertimer = 3;

aggressive = 0;

ind = 0;
strike = 0;

instance_create(50, 50, obj_catch);

///
obj_catch.object = obj_enemy;
///

instance_create(0, 0, obj_sneakybeaky);

///
obj_sneakybeaky.object = obj_enemy;
///

whichadvantage = 0;
switching = 0;
canblock = 0;

gototimer = 0;
gettingattacked = 0;
gottouched = 0;
lock = 0;

///
upwalk = spr_dr1fup;
downwalk = spr_dr1fdown;
rightwalk = spr_dr1fright;
leftwalk = spr_dr1fleft;
upattack = spr_drfstrikeup;
downattack = spr_drfstrikedown;
rightattack = spr_drfstrikeright;
leftattack = spr_drfstrikeleft;
slef = obj_enemy;
ro = rm_slamdragon;
upwhite = spr_dr1fupwhite;
downwhite = spr_dr1fdownwhite;
rightwhite = spr_dr1frightwhite;
leftwhite = spr_dr1fleftwhite;
///


//instance_create(0, 0, obj_dundr1hitbox);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
var dif = choose(0.01, - 0.01, 0);
glowSize += dif;
glowSize = clamp(glowSize, 0.96, 1.14);
if(gottouched == 0 &amp;&amp; lock == 0)
{
    if(spd == .75)
    {
        if(mp_grid_path(global.grid, path, x, y, mx + 8, my + 8, 0))
        {
            path_start(path, sped, path_action_stop, false);
        }
    }
    spd = 1;
    
    
    
    dx = (((x) div 32) * 32);
    dy = (((y + 4) div 32) * 32); 
    
    if(dx == mx &amp;&amp; dy == my &amp;&amp; aggressive == 0 &amp;&amp; gototimer == 60)
    {
        p = irandom_range(0, 3);
        if(p == 0)
        {
            mx = (((obj_one.x) div 32) * 32);
            my = (((obj_one.y + 4) div 32) * 32); 
        }
        else if(p == 1)
        {
            mx = (((obj_two.x) div 32) * 32);
            my = (((obj_two.y + 4) div 32) * 32); 
        }
        else if(p == 2)
        {
            mx = (((obj_three.x) div 32) * 32);
            my = (((obj_three.y + 4) div 32) * 32); 
        }
        else if(p == 3)
        {
            mx = (((obj_four.x) div 32) * 32);
            my = (((obj_four.y + 4) div 32) * 32); 
        }
        spd = .75;
        sped = .75;
        image_speed = .1;
        timer = 0;
        gototimer = 0;
    }
    else if(dx == mx &amp;&amp; dy == my &amp;&amp; aggressive == 0)
    {
        path_end();
        image_index = 0;
        image_speed = 0;
        gototimer += 1;
    }
    
    //scr_print(direction, 200);
    if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
    {
        sprite_index = rightwalk;
        dir = 0;
    }
    else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
    {
        sprite_index = upwalk;
        dir = 90;
    }
    else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
    {
        sprite_index = leftwalk;
        dir = 180;
    }
    else
    {
        sprite_index = downwalk;
        dir = 270;
    }
    
    if(timer == 10 &amp;&amp; aggressive == 1)
    {
        mx = (((obj_dungeonplayer.x) div 32) * 32);
        my = (((obj_dungeonplayer.y + 4) div 32) * 32); 
        timer = 0;
        spd = .75;
    }
    
    if(aggressive == 1)
    {
        obj_dungui.agro = 1;
        timer += 1;
        agrotimer += 1;
    }
    
    if(agrotimer == 200)
    {
        obj_dungui.agro = 0;
        aggressive = 0;
    }
    
    dirtimer += dirtimertimer;
    if(dirtimer &gt;= 45)
    {
        dirtimertimer = -3;
    }
    if(dirtimer &lt;= -45)
    {
        dirtimertimer = 3;
    }
    
    target = collision_line(x,y,x+lengthdir_x(range,dir + dirtimer),y+lengthdir_y(range,dir + dirtimer),obj_dungeon_player_check, true, true);
    if(instance_exists(target))
    {
        if not collision_line(x,y,target.x,target.y,obj_hitbox, true, true)
        {
            seen = true;
            agrotimer = 0;
        }
        else
        {
            seen = false;
        }
    }
    
    if(seen == true)
    {
        aggressive = 1;
        sped = 1.2;
        image_speed = .17;
    }
    else
    {
        draw_set_alpha(1);
    }
    seen = false;
}
if(aggressive == 1 &amp;&amp; obj_catch.touchingplayer == 1 &amp;&amp; lock == 0)
{
    path_end();
    gottouched = 1;
    if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
    {
        global.canmove = 1;
        if(ind == 0)
        {
            ind = 1;
            instance_create(0, 0, obj_dunattack);
            obj_dunattack.object = slef;
            obj_dungeonplayer.phy_position_x = x + 32;
            obj_dungeonplayer.phy_position_y = y;
            obj_dungeonplayer.sprite_index = spr_player_left;
            sprite_index = rightattack;
            image_speed = .06;
            image_index = 0;
        }
        if(keyboard_check(vk_enter) &amp;&amp; canblock == 0)
        {
            if(instance_exists(obj_parryready))
            {
                whichadvantage = 1;
                canblock = 1;
            }
            else
            {
                canblock = 1;
            }
            obj_dungeonplayer.sprite_index = spr_playerlleftslice;
        }
        if(image_index &gt;= 1 &amp;&amp; strike == 0)
        {
            strike = 1;
            instance_create(x + 23, y, obj_dunrightleft);
        }
        if(image_index &gt;= 3)
        {
            obj_dungeonplayer.sprite_index = spr_player_left;
            if(whichadvantage == 0 &amp;&amp; switching == 0)
            {
                instance_create(0, 0, obj_dungeoncamerashake);
                switching = 1;
                instance_create(0, 0, obj_intoenemyadv);
                with(obj_dunattack){instance_destroy();}
                obj_intoenemyadv.roo = ro;   
                global.advantage = 1;             
            }
            if(whichadvantage == 1 &amp;&amp; switching == 0)
            {
                switching = 1;
                instance_create(0, 0, obj_intonoadv);
                with(obj_dunattack){instance_destroy();}
                obj_intonoadv.roo = ro;   
                global.advantage = 2;             
            }
        }
        if(image_index &gt;= 4)
        {
            image_speed = 0;
        }
    }
    else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
    {
        global.canmove = 1;
        if(ind == 0)
        {
            ind = 1;
            instance_create(0, 0, obj_dunattack);
            obj_dunattack.object = slef;
            obj_dungeonplayer.phy_position_x = x;
            obj_dungeonplayer.phy_position_y = y - 22;
            obj_dungeonplayer.sprite_index = spr_player_down;
            sprite_index = upattack;
            image_speed = .06;
            image_index = 0;
        }
        if(keyboard_check(vk_enter) &amp;&amp; canblock == 0)
        {
            if(instance_exists(obj_parryready))
            {
                whichadvantage = 1;
                canblock = 1;
            }
            else
            {
                canblock = 1;
            }
            obj_dungeonplayer.sprite_index = spr_playerldownslice;
        }
        if(image_index &gt;= 1 &amp;&amp; strike == 0)
        {
            strike = 1;
            instance_create(x, y - 15, obj_dunupright);
        }
        if(image_index &gt;= 3)
        {
            obj_dungeonplayer.sprite_index = spr_player_down;
            if(whichadvantage == 0 &amp;&amp; switching == 0)
            {
                instance_create(0, 0, obj_dungeoncamerashake);
                switching = 1;
                instance_create(0, 0, obj_intoenemyadv);
                with(obj_dunattack){instance_destroy();}
                obj_intoenemyadv.roo = ro;   
                global.advantage = 1; 
            }
            if(whichadvantage == 1 &amp;&amp; switching == 0)
            {
                switching = 1;
                instance_create(0, 0, obj_intonoadv);
                with(obj_dunattack){instance_destroy();}
                obj_intonoadv.roo = ro;   
                global.advantage = 2;             
            }
        }
        if(image_index &gt;= 4)
        {
            image_speed = 0;
        }
    }
    else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
    {
        global.canmove = 1;
        if(ind == 0)
        {
            ind = 1;
            instance_create(0, 0, obj_dunattack);
            obj_dunattack.object = slef;
            obj_dungeonplayer.phy_position_x = x - 32;
            obj_dungeonplayer.phy_position_y = y;
            obj_dungeonplayer.sprite_index = spr_player_right;
            sprite_index = leftattack;
            image_speed = .06;
            image_index = 0;
        }
        if(keyboard_check(vk_enter) &amp;&amp; canblock == 0)
        {
            if(instance_exists(obj_parryready))
            {
                whichadvantage = 1;
                canblock = 1;
            }
            else
            {
                canblock = 1;
            }
            obj_dungeonplayer.sprite_index = spr_playerrrrightslice;
        }
        if(image_index &gt;= 1 &amp;&amp; strike == 0)
        {
            strike = 1;
            instance_create(x - 23, y, obj_dunleftright);
        }
        if(image_index &gt;= 3)
        {
            obj_dungeonplayer.sprite_index = spr_player_right;
            if(whichadvantage == 0 &amp;&amp; switching == 0)
            {
                instance_create(0, 0, obj_dungeoncamerashake);
                switching = 1;
                instance_create(0, 0, obj_intoenemyadv);
                with(obj_dunattack){instance_destroy();}
                obj_intoenemyadv.roo = ro;   
                global.advantage = 1;             
            }
            if(whichadvantage == 1 &amp;&amp; switching == 0)
            {
                switching = 1;
                instance_create(0, 0, obj_intonoadv);
                with(obj_dunattack){instance_destroy();}
                obj_intonoadv.roo = ro;   
                global.advantage = 2;             
            }
        }
        if(image_index &gt;= 4)
        {
            image_speed = 0;
        }
    }
    else
    {
        global.canmove = 1;
        if(ind == 0)
        {
            ind = 1;
            instance_create(0, 0, obj_dunattack);
            obj_dunattack.object = slef;
            obj_dungeonplayer.phy_position_x = x;
            obj_dungeonplayer.phy_position_y = y + 20;
            obj_dungeonplayer.sprite_index = spr_player_up;
            sprite_index = downattack;
            image_speed = .06;
            image_index = 0;
        }
        if(keyboard_check(vk_enter) &amp;&amp; canblock == 0)
        {
            if(instance_exists(obj_parryready))
            {
                whichadvantage = 1;
                canblock = 1;
            }
            else
            {
                canblock = 1;
            }
            obj_dungeonplayer.sprite_index = spr_playerleftslice;
        }
        if(image_index &gt;= 1 &amp;&amp; strike == 0)
        {
            strike = 1;
            instance_create(x, y + 15, obj_dundownright);
        }
        if(image_index &gt;= 3)
        {
            obj_dungeonplayer.sprite_index = spr_player_up;
            if(whichadvantage == 0 &amp;&amp; switching == 0)
            {
                instance_create(0, 0, obj_dungeoncamerashake);
                switching = 1;
                instance_create(0, 0, obj_intoenemyadv);
                with(obj_dunattack){instance_destroy();}
                obj_intoenemyadv.roo = ro;   
                global.advantage = 1; 
            }
            if(whichadvantage == 1 &amp;&amp; switching == 0)
            {
                switching = 1;
                instance_create(0, 0, obj_intonoadv);
                with(obj_dunattack){instance_destroy();}
                obj_intonoadv.roo = ro;   
                global.advantage = 2;             
            }
        }
        if(image_index &gt;= 4)
        {
            image_speed = 0;
        }
    }
}
if(aggressive == 0 &amp;&amp; lock == 0)
{
    if(keyboard_check(vk_enter) &amp;&amp; instance_exists(obj_attackready))
    {
        instance_create(0, 0, obj_dunattack);
        obj_dunattack.object = slef;
        var ex;
        var ey;
        lock = 1;
        path_end();
        image_speed = 0;
        with(obj_frombehind){cancreate = 1;}
        with(obj_attackready){instance_destroy();}
        if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
        {
            ex = x - 15;
            ey = y;
            obj_dungeonplayer.phy_position_x = ex;
            obj_dungeonplayer.phy_position_y = ey;
            instance_create(ex, ey + 4, obj_dunrightstab);
            obj_dungeonplayer.sprite_index = spr_playerrightstab;
            obj_dungeonplayer.image_speed = .1;
            obj_dungeonplayer.image_index = 0;
            global.canmove = 1;
            global.animate = 1;
        }
        else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
        {
            ex = x;
            ey = y + 15;
            obj_dungeonplayer.phy_position_x = ex;
            obj_dungeonplayer.phy_position_y = ey;
            instance_create(ex + 4, ey, obj_dunupstab);
            obj_dungeonplayer.sprite_index = spr_playerupstab;
            obj_dungeonplayer.image_speed = .1;
            obj_dungeonplayer.image_index = 0;
            global.canmove = 1;
            global.animate = 1;
        }
        else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
        {
            ex = x +15;
            ey = y;
            obj_dungeonplayer.phy_position_x = ex;
            obj_dungeonplayer.phy_position_y = ey;
            instance_create(ex, ey + 4, obj_dunleftstab);
            obj_dungeonplayer.sprite_index = spr_playerleftstab;
            obj_dungeonplayer.image_speed = .1;
            obj_dungeonplayer.image_index = 0;
            global.canmove = 1;
            global.animate = 1;
        }
        else
        {
            ex = x;
            ey = y - 15;
            obj_dungeonplayer.phy_position_x = ex;
            obj_dungeonplayer.phy_position_y = ey;
            instance_create(ex - 4, ey, obj_dunupstab);
            obj_dungeonplayer.sprite_index = spr_playerdownstab;
            obj_dungeonplayer.image_speed = .1;
            obj_dungeonplayer.image_index = 0;
            global.canmove = 1;
            global.animate = 1;
        }
    }
}
if(lock == 1 &amp;&amp; switching == 0)
{
    if(obj_dungeonplayer.image_index &gt;= 1 &amp;&amp; obj_dungeonplayer.image_index &lt; 3)
    {
        if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
        {
            sprite_index = rightwhite;
        }
        else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
        {
            sprite_index = upwhite;
        }
        else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
        {
            sprite_index = leftwhite;
        }
        else
        {
            sprite_index = downwhite;
        }
    }
    else
    {
        if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
        {
            sprite_index = rightwalk;
        }
        else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
        {
            sprite_index = upwalk;
        }
        else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
        {
            sprite_index = leftwalk;
        }
        else
        {
            sprite_index = downwalk;
        }        
    }
    if(obj_dungeonplayer.image_index &gt;= 3)
    {
        with(obj_dunattack){instance_destroy();}
        instance_create(0, 0, obj_intopladvantage);
        obj_intopladvantage.roo = ro;   
        obj_dungeonplayer.image_speed = 0;
        obj_dungeonplayer.image_index = 0;
        global.advantage = 0;   
        switching = 1;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dungeonplayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
//draw_line(x,y,x+lengthdir_x(range,dir + dirtimer),y+lengthdir_y(range,dir + dirtimer));
draw_set_color(c_black);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,12</point>
    <point>40,12</point>
    <point>40,42</point>
    <point>8,42</point>
  </PhysicsShapePoints>
</object>
