<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cavebatdown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>touchingpl = 0;
startmoving = 0;
image_speed = 0;
setonce = 0;
playerturn = 0;
imagespeed = 0;
white = 0;
setwhite = 0;
takingdamage = 0;
dead = 0;
died = 0;
enemyiam = 2;
firstturn = 0;
waitforslice = 20;
pa = 0;
d = 0;
grounded = 0;
flying = 0;
f = 0;
mm = 0;
my = 0;
sw1 = 0;
sw2 = 0;
attacktype = 0;
beginwaittime = 1;
endingturn = 1;
endturn = 1;
waiting = 0;
hb = 0;

defence = 1.5;

instance_create(0, 0, obj_bat2hitbox);
instance_create(0, 0, obj_closemeleecirc2);
instance_create(0, 0, obj_ranged2);
instance_create(0, 0, obj_batshadow2);
instance_create(0, 0, obj_bat2hitcircle);
instance_create(0, 0, obj_bat2hitcircle2);

hitcircle = obj_bat2hitcircle;

path = path_add();
spd = .5;
mx = 0;
my = 0;
timer = 0;

randomize();





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead == 1)
{
    if(d == 0)
    {
        path_end();
        d = 1;
        image_index = 0;
    }
    if(image_index == 2 &amp;&amp; died == 0)
    {
        imagespeed = 0;
        depth = -1;
        with(obj_bat2hitbox)
        {
            instance_destroy();
        }
        obj_combat.enemycount -= 1;
        if(enemyiam == 1)
        {
            obj_combat.enemy1 = 0;
            with(obj_closemeleecirc1){instance_destroy();}
            with(obj_ranged1){instance_destroy();}
            //with(obj_hitcircleddragon1){instance_destroy();}
        }
        else if(enemyiam == 2)
        {
            obj_combat.enemy2 = 0;     
            with(obj_closemeleecirc2){instance_destroy();}
            with(obj_ranged2){instance_destroy();}
            //with(obj_hitcircleddragon2){instance_destroy();}    
        }
        else if(enemyiam == 3)
        {
            obj_combat.enemy3 = 0;     
            with(obj_closemeleecirc3){instance_destroy();}
            with(obj_ranged3){instance_destroy();}
            //with(obj_hitcircleddragon3){instance_destroy();}        
        }
        died = 1;
    }
    else if(died == 0)
    {
            if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
            {
                sprite_index = spr_cavebatrightdead;
            }
            else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
            {
                sprite_index = spr_cavebatupdead;
            }
            else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
            {
                sprite_index = spr_cavebatleftdead;
            }
            else
            {
                sprite_index = spr_cavebatdowndead;
            }
        imagespeed = .03;
        scr_imageindex(imagespeed);
    }
}
else if(obj_combat.playerdied == 0)
{
    depth = -y;
    if(obj_combat.newturn == 1)
    {
        setonce = 0;
        endingturn = 1;
        if(firstturn == 0)
        {
            
        }
        firstturn = 1;
    }
    if(startmoving != beginwaittime)
    {
        startmoving += 1;
        direction = 270;
    }
    else
    {
        if(attacktype == 0 &amp;&amp; endingturn == 1) // Follow Player
        {
            mm = 0;
            if(hitcircle.touchingplayer == 1 &amp;&amp; waitforslice == 0)
            {
                path_end();
                attacktype = 1;
                direction = point_direction(x, y, obj_combatplayer.x, obj_combatplayer.y);
                if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
                {
                    sprite_index = spr_cavebatright;
                }
                else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
                {
                    sprite_index = spr_cavebatup;
                }
                else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
                {
                    sprite_index = spr_cavebatleft;
                }
                else
                {
                    sprite_index = spr_cavebatdown;
                }
                image_index = 0;
            }
            else
            {
                imagespeed = .1;
                if(spd == .75)
                {
                    if(mp_grid_path(global.grid, path, x, y, mx + 8, my + 8, 0))
                    {
                        path_start(path, 1.1, path_action_stop, false);
                    }
                }
            }
            if(waitforslice != 0)
            {
                waitforslice -= 1;
            }
            spd = 1;
            
            if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
            {
                sprite_index = spr_cavebatright;
            }
            else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
            {
                sprite_index = spr_cavebatup;
            }
            else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
            {
                sprite_index = spr_cavebatleft;
            }
            else
            {
                sprite_index = spr_cavebatdown;
            }
            if(timer == 10)
            {
                timer = 0;
                spd = .75;
                mx = (((obj_combatplayer.x) div 16) * 16);
                my = (((obj_combatplayer.y + 4) div 16) * 16);
            }
            timer += 1;    
        }
        else if(attacktype == 1 &amp;&amp; endingturn == 1) //Slice
        {
            touchingpl = obj_bat2hitcircle2.touchingplayer;
            dodge = obj_bat2hitcircle2.dodge;
            touchingar = obj_bat2hitcircle2.touchingarcher;
            mm = 1;
            if(sprite_index == spr_cavebatup)
            {
                sprite_index = spr_cavebatattackup;
                image_index = 0;
            }
            else if(sprite_index == spr_cavebatdown)
            {
                sprite_index = spr_cavebatattackdown;
                image_index = 0;
            }
            else if(sprite_index == spr_cavebatright)
            {
                sprite_index = spr_cavebatattackright;
                image_index = 0;
            }
            else if(sprite_index == spr_cavebatleft)
            {
                sprite_index = spr_cavebatattackleft;
                image_index = 0;
            }
            imagespeed = .12;
            if(image_index == 1)
            {
                if(sprite_index == spr_cavebatattackup)
                {
                    instance_create(x, y - 20, obj_uprighttoleftslice);
                    with(obj_uprighttoleftslice){spd = .5;}
                }
                else if(sprite_index == spr_cavebatattackdown)
                {
                    instance_create(x, y + 22, obj_downrighttoleftslice);
                    with(obj_downrighttoleftslice){spd = .5;}
                }
                else if(sprite_index == spr_cavebatattackright)
                {
                    instance_create(x + 20, y, obj_rightrighttoleftslice);
                    with(obj_rightrighttoleftslice){spd = .5;}
                }
                else if(sprite_index == spr_cavebatattackleft)
                {
                    instance_create(x - 20, y, obj_leftlefttorightslice);
                    with(obj_leftlefttorightslice){spd = .5;}
                }
            }
            if(image_index == 2)
            {
                if(touchingpl == 1)
                {
                    if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
                    {
                        with(obj_combatplayer)
                        {
                            launchright = 10;
                        }
                    }
                    else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
                    {
                        with(obj_combatplayer)
                        {
                            launchup = 10;
                        }
                    }
                    else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
                    {
                        with(obj_combatplayer)
                        {
                            launchleft = 10;
                        }
                    }
                    else
                    {
                        with(obj_combatplayer)
                        {
                            launchback = 10;
                        }
                    }
                    with(obj_combat)
                    {
                        plhealth -= 2;
                    }
                }
                if(touchingar == 1)
                {
                    obj_archer.heal += 22;
                }
                if(touchingpl == 0 &amp;&amp; dodge == 1)
                {
                    audio_play_sound(snd_dodge, 0, false);
                }
            }
            if(image_index == 3)
            {
                imagespeed = 0;
                waitforslice = 30;
                if(pa &lt; 20)
                {
                    pa += 1;
                }
                else
                {
                    pa = 0;
                    image_index = 0;
                    attacktype = 0;
                }
            }
        }
        else if(endingturn == 0) //Ending Turn
        {
            if(setonce == 0)
            {
                imagespeed = 0;
                path_end();
                setonce = 1;
                image_index = 0;
                waitforslice = 60;
                attacktype = 0;
                if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
                {
                    sprite_index = spr_cavebatright;
                }
                else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
                {
                    sprite_index = spr_cavebatup;
                }
                else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
                {
                    sprite_index = spr_cavebatleft;
                }
                else
                {
                    sprite_index = spr_cavebatdown;
                }
            }
            if(white != 0)
            {
                if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
                {
                    sprite_index = spr_cavebatrightwhite;
                }
                else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
                {
                    sprite_index = spr_cavebatupwhite;
                }
                else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
                {
                    sprite_index = spr_cavebatleftwhite;
                }
                else
                {
                    sprite_index = spr_cavebatdownwhite;
                }
                setwhite = 1;
            }
            else if(setwhite == 1)
            {
                if(direction &gt; 315 &amp;&amp; direction &lt; 360 || direction &gt;= 0 &amp;&amp; direction &lt; 45)
                {
                    sprite_index = spr_cavebatright;
                }
                else if(direction &gt;= 45 &amp;&amp; direction &lt;= 135)
                {
                    sprite_index = spr_cavebatup;
                }
                else if(direction &gt; 135 &amp;&amp; direction &lt; 225)
                {
                    sprite_index = spr_cavebatleft;
                }
                else
                {
                    sprite_index = spr_cavebatdown;
                }
                setwhite = 0;
            }
            if(takingdamage != 0)
            {
                if(enemyiam == 1)
                {
                    obj_combat.enemy1health += takingdamage * defence;
                }
                else if(enemyiam == 2)
                {
                    obj_combat.enemy2health += takingdamage * defence;              
                }
                else if(enemyiam == 3)
                {
                    obj_combat.enemy3health += takingdamage * defence;                  
                }
            }
        }
    }
    scr_imageindex(imagespeed);
}
else if(obj_combatplayer.died == 1)
{
    image_index = 0;
    path_end();
}
if(y &gt;= 64 &amp;&amp; hb == 0)
{
    instance_create(320, 32, obj_hitbox); 
    instance_create(320, 48, obj_hitbox); 
    instance_create(336, 32, obj_hitbox); 
    instance_create(336, 48, obj_hitbox); 
    hb = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
